#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <ctime> 
#include <SDL/SDL.h>
#include <math.h>
#include "Neurons.h"
using namespace std;

int main(void){
	srand(time(0));
	Neuron * neurons_list = (Neuron *) malloc ( NEURONS_X * NEURONS_Y * sizeof ( Neuron ) );
	Neuron * connects[8];
	long int fired[NEURONS_X * NEURONS_Y];
	long int fired_index = 0;
	long int i, j;
	for(i = 0; i < NEURONS_X * NEURONS_Y; i++){
	#if 1
		if(i / NEURONS_Y + 1 < NEURONS_Y){
			connects[2] = &neurons_list[(i / NEURONS_Y + 1) * NEURONS_X + i % NEURONS_X];
			if(i % NEURONS_X + 1 < NEURONS_X){
				connects[1] = &neurons_list[(i / NEURONS_Y + 1) * NEURONS_X + i % NEURONS_X + 1];
			}else{
				connects[1] = NULL;
			}
			if(i % NEURONS_X - 1){
				connects[3] = &neurons_list[(i / NEURONS_Y + 1) * NEURONS_X + i % NEURONS_X - 1];
			}else{
				connects[3] = NULL;
			}
		}else{
			connects[1] = NULL;
			connects[2] = NULL;
			connects[3] = NULL;
		}
		if(i / NEURONS_Y - 1 >= 0){
			connects[6] = &neurons_list[(i / NEURONS_Y - 1) * NEURONS_X + i % NEURONS_X];
			if(i % NEURONS_X + 1 < NEURONS_X){
				connects[7] = &neurons_list[(i / NEURONS_Y - 1) * NEURONS_X + i % NEURONS_X + 1];
			}else{
				connects[7] = NULL;
			}
			if(i % NEURONS_X - 1){
				connects[5] = &neurons_list[(i / NEURONS_Y - 1) * NEURONS_X + i % NEURONS_X - 1];
			}else{
				connects[5] = NULL;
			}
		}else{
			connects[5] = NULL;
			connects[6] = NULL;
			connects[7] = NULL;
		}
		if(i % NEURONS_X + 1 < NEURONS_X){
			connects[0] = &neurons_list[(i / NEURONS_Y) * NEURONS_X + i % NEURONS_X + 1];
		}else{
			connects[0] = NULL;
		}
		if(i % NEURONS_X - 1){
			connects[4] = &neurons_list[(i / NEURONS_Y) * NEURONS_X + i % NEURONS_X - 1];
		}else{
			connects[4] = NULL;
		}
		#else
		for(j = 0; j < 8; j ++){
			connects[j] = &neurons_list[rand() % (NEURONS_X * NEURONS_Y)];
		}
		#endif
		neurons_list[i].Create(i % NEURONS_X, i / NEURONS_X, &connects[0],i % NEURONS_X > 70);// rand() % 1000 > 100);
	}
	if (SDL_Init(SDL_INIT_VIDEO) < 0 ) return 1; 
	SDL_Event event;
	SDL_Surface *screen;
	if (!(screen = SDL_SetVideoMode(WIDTH, HEIGHT, DEPTH, SDL_HWSURFACE)))
	{
		SDL_Quit();
		return 1;
	}
	bool keypress = 0;
	int t = 0;
	while(!keypress){
		while(SDL_PollEvent(&event)){
			switch (event.type){
				case SDL_QUIT:
					keypress = 1;
					break;
				case SDL_MOUSEBUTTONDOWN:
					if(event.button.x < NEURONS_X && event.button.y < NEURONS_Y){
						fired[fired_index++] = i;
						neurons_list[event.button.y * NEURONS_X + event.button.x].send();
					}
			}
		}
		for(i = 0; i < NEURONS_X * NEURONS_Y; i++){
			neurons_list[i].run();
			if(neurons_list[i].v >= 30) fired[fired_index++] = i;
		}
		//for(i = 0; i < NEURONS_X * NEURONS_Y; i++){
		//	//cout << neurons_list[i].v << "\n";
		//	int color = sqrt(neurons_list[i].v * neurons_list[i].v);
		//	setpixel(screen, neurons_list[i].x, neurons_list[i].y, color, color, color);
		//}
		setpixel(screen, (int)(t / 3.0) % WIDTH, -fired_index / 100.0 + 1000, 255, 255, 255);
		if((int)(t / 3.0) % WIDTH == 0){
			for(i = 0; i < WIDTH; i ++){
				for(j = 0; j < HEIGHT; j ++){
					setpixel(screen, i, j, 0, 0, 0);
				}
			}
		}
		for(i = 0; i < fired_index; i++){
			setpixel(screen, neurons_list[fired[i]].x, neurons_list[fired[i]].y, 255, 255, 255);
			neurons_list[fired[i]].v = neurons_list[fired[i]].c;
			neurons_list[fired[i]].u += neurons_list[fired[i]].d;
			neurons_list[fired[i]].send();
		}
		SDL_Flip(screen);
		for(i = 0; i < fired_index; i++){
			setpixel(screen, neurons_list[fired[i]].x, neurons_list[fired[i]].y, 0, 0, 0);
		}
		for(i = 0; i < NEURONS_X * NEURONS_Y; i++){
			neurons_list[i].update();
		}
		fired_index = 0;
		++t;
	}
	SDL_Quit();
	return(0);
}
